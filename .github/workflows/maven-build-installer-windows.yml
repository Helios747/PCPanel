# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build Windows Installer

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    branches: [ main ]
jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Download Wix
        uses: i3h/download-release-asset@v1
        with:
          owner: wixtoolset
          repo: wix3
          tag: wix3112rtm
          file: wix311-binaries.zip
      - name: Decompress Wix
        uses: DuckSoft/extract-7z-action@v1.0
        with:
          pathSource: wix311-binaries.zip
          pathTarget: ./target/wix
      - name: Add Wix to Path
        run: echo "$HOME/target/wix" >> $GITHUB_PATH
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17.0.1
          distribution: 'temurin'
          cache: 'maven'
      - name: Build with Maven
        run: mvn -B clean install --file pom.xml
      - name: Store artifact
        uses: actions/upload-artifact@v3
        with:
          name: installer
          path: ./target/*.msi

  preRelease:
    name: Pre-release
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.4.0

      - uses: actions/download-artifact@v3
        with:
          name: installer
          path: target

      - name: Extract Maven project version
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: project

      # Remove old pre-releases
      - name: Remove Old Pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.prerelease == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create new pre-release
      - name: Create Pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create latest-windows \
            --prerelease \
            --title "v${{steps.project.outputs.version}} Pre-Release" \
            --notes "$(sed '/##/Q' CHANGELOG.md)"

      # Upload artifact as a release asset
      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload latest-windows target/*
